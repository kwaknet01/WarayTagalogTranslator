{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\redemption\\\\PycharmProjects\\\\translator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\redemption\\\\PycharmProjects\\\\translator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\redemption\\\\PycharmProjects\\\\translator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\redemption\\\\PycharmProjects\\\\translator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\redemption\\\\PycharmProjects\\\\translator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\redemption\\\\PycharmProjects\\\\translator\\\\src\\\\components\\\\home.jsx\";\nimport React, { Component } from 'react';\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  function Home() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Home)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      output: \"Nothing to show\"\n    };\n\n    _this.handleLaunch = function () {\n      //this.setState({output : \"launch clicked\"});\n      var _require = require(\"child_process\"),\n          spawn = _require.spawn;\n\n      var pythonProcess = spawn('python', [\"C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py\"]);\n      pythonProcess.stdout.on('data', function (data) {\n        console.log(data.toString());\n\n        _this.setState({\n          output: data\n        });\n      });\n      /* const express = require('express');\r\n       const app = express();\r\n         app.get('/', (req, res) => {\r\n             const { spawn } = require('child_process');\r\n           const pyProg = spawn('python', ['C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py']);\r\n             pyProg.stdout.on('data', function(data) {\r\n                 console.log(data.toString());\r\n               res.write(data);\r\n               res.end('end');\r\n           });\r\n       })\r\n         app.listen(3000, () => console.log('Application listening on port 3000')); */\n\n      /* const express = require('express');\r\n       const app = express();\r\n         let runPy = new Promise(function (success, nosuccess) {\r\n             const { spawn } = require('child_process');\r\n           const pyProg = spawn('python', ['C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py']);\r\n             pyProg.stdout.on('data', function (data) {\r\n               success(data);\r\n           });\r\n             pyProg.stderr.on('data', (data) => {\r\n               nosuccess(data);\r\n           });\r\n         });\r\n         app.get('/', (req, res) => {\r\n           res.write('welcome\\n');\r\n             runPy.then(function (fromRunpy) {\r\n               console.log(fromRunpy.toString());\r\n               res.end(fromRunpy);\r\n           });\r\n       })\r\n         app.listen(3000, () => console.log('Application listening on port 3000!')) */\n\n      /*let myPythonScriptPath = 'C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py';\r\n         // Use python shell\r\n       const {PythonShell} = require(\"python-shell\");\r\n       let pyshell = new PythonShell(myPythonScriptPath);\r\n         pyshell.on('message', function (message) {\r\n           // received a message sent from the Python script (a simple \"print\" statement)\r\n           console.log(message);\r\n       });\r\n         // end the input stream and allow the process to exit\r\n       pyshell.end(function (err) {\r\n           if (err) {\r\n               throw err;\r\n           }\r\n           ;\r\n             console.log('finished');\r\n       });*/\n    };\n\n    _this.handleEvaluate = function () {\n      _this.setState({\n        output: \"evaluate clicked\"\n      });\n    };\n\n    _this.handleReverse = function () {\n      _this.setState({\n        output: \"reverse clicked\"\n      });\n    };\n\n    _this.handleEpoch = function () {\n      _this.setState({\n        output: \"epoch clicked\"\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"mainContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"English to German Translator\")), React.createElement(\"div\", {\n        id: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-primary\",\n        onClick: this.handleLaunch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Launch\"), React.createElement(\"button\", {\n        className: \"btn-primary ml13\",\n        onClick: this.handleEvaluate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Evaluate\"), React.createElement(\"button\", {\n        className: \"btn-primary ml13\",\n        onClick: this.handleReverse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Reverse Phrase Order\"), React.createElement(\"button\", {\n        className: \"btn-primary ml13\",\n        onClick: this.handleEpoch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Set Epochs\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Display Output:\"), React.createElement(\"div\", {\n        id: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, this.state.output));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport default Home;","map":{"version":3,"sources":["C:\\Users\\redemption\\PycharmProjects\\translator\\src\\components\\home.jsx"],"names":["React","Component","Home","state","output","handleLaunch","require","spawn","pythonProcess","stdout","on","data","console","log","toString","setState","handleEvaluate","handleReverse","handleEpoch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;IAGMC,I;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,MAAM,EAAE;AADJ,K;;UAIRC,Y,GAAe,YAAM;AACjB;AADiB,qBAGEC,OAAO,CAAC,eAAD,CAHT;AAAA,UAGRC,KAHQ,YAGRA,KAHQ;;AAIhB,UAAMC,aAAa,GAAGD,KAAK,CAAC,QAAD,EAAW,CAAC,gFAAD,CAAX,CAA3B;AAEAC,MAAAA,aAAa,CAACC,MAAd,CAAqBC,EAArB,CAAwB,MAAxB,EAAgC,UAACC,IAAD,EAAU;AACrCC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,QAAL,EAAZ;;AACD,cAAKC,QAAL,CAAc;AAACX,UAAAA,MAAM,EAAGO;AAAV,SAAd;AACH,OAHD;AASD;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;AA6BD;;;;;;;;;;;;;;;;AAuBF,K;;UAEDK,c,GAAiB,YAAM;AACnB,YAAKD,QAAL,CAAc;AAACX,QAAAA,MAAM,EAAE;AAAT,OAAd;AACH,K;;UAEDa,a,GAAgB,YAAM;AAClB,YAAKF,QAAL,CAAc;AAACX,QAAAA,MAAM,EAAE;AAAT,OAAd;AACH,K;;UAEDc,W,GAAc,YAAM;AAChB,YAAKH,QAAL,CAAc;AAACX,QAAAA,MAAM,EAAE;AAAT,OAAd;AACH,K;;;;;;;6BAEQ;AACL,aAEI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADJ,CADJ,EAII;AAAK,QAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAE,KAAKC,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI;AAAQ,QAAA,SAAS,EAAC,kBAAlB;AAAqC,QAAA,OAAO,EAAE,KAAKW,cAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAGI;AAAQ,QAAA,SAAS,EAAC,kBAAlB;AAAqC,QAAA,OAAO,EAAE,KAAKC,aAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAHJ,EAII;AAAQ,QAAA,SAAS,EAAC,kBAAlB;AAAqC,QAAA,OAAO,EAAE,KAAKC,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJJ,CAJJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAVJ,EAWI;AAAK,QAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKf,KAAL,CAAWC,MADhB,CAXJ,CAFJ;AAmBH;;;;EA5HcH,S;;AA+HnB,eAAeC,IAAf","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        output: \"Nothing to show\"\r\n    };\r\n\r\n    handleLaunch = () => {\r\n        //this.setState({output : \"launch clicked\"});\r\n\r\n         const { spawn } = require(\"child_process\");\r\n         const pythonProcess = spawn('python', [\"C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py\"]);\r\n\r\n         pythonProcess.stdout.on('data', (data) => {\r\n              console.log(data.toString());\r\n             this.setState({output : data})\r\n         });\r\n\r\n          \r\n\r\n\r\n\r\n        /* const express = require('express');\r\n         const app = express();\r\n\r\n         app.get('/', (req, res) => {\r\n\r\n             const { spawn } = require('child_process');\r\n             const pyProg = spawn('python', ['C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py']);\r\n\r\n             pyProg.stdout.on('data', function(data) {\r\n\r\n                 console.log(data.toString());\r\n                 res.write(data);\r\n                 res.end('end');\r\n             });\r\n         })\r\n\r\n         app.listen(3000, () => console.log('Application listening on port 3000')); */\r\n\r\n        /* const express = require('express');\r\n         const app = express();\r\n\r\n         let runPy = new Promise(function (success, nosuccess) {\r\n\r\n             const { spawn } = require('child_process');\r\n             const pyProg = spawn('python', ['C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py']);\r\n\r\n             pyProg.stdout.on('data', function (data) {\r\n                 success(data);\r\n             });\r\n\r\n             pyProg.stderr.on('data', (data) => {\r\n                 nosuccess(data);\r\n             });\r\n\r\n         });\r\n\r\n         app.get('/', (req, res) => {\r\n             res.write('welcome\\n');\r\n\r\n             runPy.then(function (fromRunpy) {\r\n                 console.log(fromRunpy.toString());\r\n                 res.end(fromRunpy);\r\n             });\r\n         })\r\n\r\n         app.listen(3000, () => console.log('Application listening on port 3000!')) */\r\n\r\n       /*let myPythonScriptPath = 'C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py';\r\n\r\n        // Use python shell\r\n        const {PythonShell} = require(\"python-shell\");\r\n        let pyshell = new PythonShell(myPythonScriptPath);\r\n\r\n        pyshell.on('message', function (message) {\r\n            // received a message sent from the Python script (a simple \"print\" statement)\r\n            console.log(message);\r\n        });\r\n\r\n        // end the input stream and allow the process to exit\r\n        pyshell.end(function (err) {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n            ;\r\n\r\n            console.log('finished');\r\n        });*/\r\n\r\n\r\n\r\n    };\r\n\r\n    handleEvaluate = () => {\r\n        this.setState({output: \"evaluate clicked\"})\r\n    };\r\n\r\n    handleReverse = () => {\r\n        this.setState({output: \"reverse clicked\"})\r\n    };\r\n\r\n    handleEpoch = () => {\r\n        this.setState({output: \"epoch clicked\"})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"mainContent\">\r\n                <div id=\"title\">\r\n                    <h1>English to German Translator</h1>\r\n                </div>\r\n                <div id=\"buttons\">\r\n                    <button className=\"btn-primary\" onClick={this.handleLaunch}>Launch</button>\r\n                    <button className=\"btn-primary ml13\" onClick={this.handleEvaluate}>Evaluate</button>\r\n                    <button className=\"btn-primary ml13\" onClick={this.handleReverse}>Reverse Phrase Order</button>\r\n                    <button className=\"btn-primary ml13\" onClick={this.handleEpoch}>Set Epochs</button>\r\n                </div>\r\n                <p>Display Output:</p>\r\n                <div id=\"content\">\r\n                    {this.state.output}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}