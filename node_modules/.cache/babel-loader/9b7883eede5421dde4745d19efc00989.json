{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\redemption\\\\PycharmProjects\\\\translator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\redemption\\\\PycharmProjects\\\\translator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\redemption\\\\PycharmProjects\\\\translator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\redemption\\\\PycharmProjects\\\\translator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\redemption\\\\PycharmProjects\\\\translator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\redemption\\\\PycharmProjects\\\\translator\\\\src\\\\components\\\\home.jsx\";\nimport React, { Component } from 'react';\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  function Home() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Home)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      output: \"Nothing to show\"\n    };\n\n    _this.handleLaunch = function () {\n      //this.setState({output : \"launch clicked\"});\n\n      /* const express = require('express');\r\n       const app = express();\r\n         this.setState({output : \"launch clicked\"});\r\n         app.get('/', (req, res) => {\r\n       const { spawn } = require(\"child_process\");\r\n       const pythonProcess = spawn('python', [\"C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py\"]);\r\n         pythonProcess.stdout.on('data', (data) => {\r\n            console.log(data.toString());\r\n           this.setState({output : data})\r\n       });\r\n          });\r\n         app.listen(3000, () => console.log('Application listening on port 3000')); */\n\n      /* const express = require('express');\r\n       const app = express();\r\n         app.get('/', (req, res) => {\r\n             const { spawn } = require('child_process');\r\n           const pyProg = spawn('python', ['C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py']);\r\n             pyProg.stdout.on('data', function(data) {\r\n                 console.log(data.toString());\r\n               res.write(data);\r\n               res.end('end');\r\n           });\r\n       })\r\n         app.listen(3000, () => console.log('Application listening on port 3000')); */\n\n      /* const express = require('express');\r\n       const app = express();\r\n         let runPy = new Promise(function (success, nosuccess) {\r\n             const { spawn } = require('child_process');\r\n           const pyProg = spawn('python', ['C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py']);\r\n             pyProg.stdout.on('data', function (data) {\r\n               success(data);\r\n           });\r\n             pyProg.stderr.on('data', (data) => {\r\n               nosuccess(data);\r\n           });\r\n         });\r\n         app.get('/', (req, res) => {\r\n           res.write('welcome\\n');\r\n             runPy.then(function (fromRunpy) {\r\n               console.log(fromRunpy.toString());\r\n               res.end(fromRunpy);\r\n           });\r\n       })\r\n         app.listen(3000, () => console.log('Application listening on port 3000!')) */\n\n      /*   let myPythonScriptPath = 'C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py';\r\n           // Use python shell\r\n         let PythonShell = require('python-shell');\r\n         let pyshell = new PythonShell(myPythonScriptPath);\r\n           pyshell.on('message', function (message) {\r\n             // received a message sent from the Python script (a simple \"print\" statement)\r\n             console.log(message);\r\n         });\r\n           // end the input stream and allow the process to exit\r\n         pyshell.end(function (err) {\r\n             if (err) {\r\n                 throw err;\r\n             }\r\n             ;\r\n               console.log('finished');\r\n         }); */\n      // The path to your python script\n      var myPythonScript = \"script.py\"; // Provide the path of the python executable, if python is available as environment variable then you can use only \"python\"\n\n      var pythonExecutable = \"python.exe\"; // Function to convert an Uint8Array to a string\n\n      var uint8arrayToString = function uint8arrayToString(data) {\n        return String.fromCharCode.apply(null, data);\n      };\n\n      var spawn = require('child_process').spawn;\n\n      var scriptExecution = spawn(pythonExecutable, [myPythonScript]); // Handle normal output\n\n      scriptExecution.stdout.on('data', function (data) {\n        console.log(uint8arrayToString(data));\n      }); // Handle error output\n\n      scriptExecution.stderr.on('data', function (data) {\n        // As said before, convert the Uint8Array to a readable string.\n        console.log(uint8arrayToString(data));\n      });\n      scriptExecution.on('exit', function (code) {\n        console.log(\"Process quit with code : \" + code);\n      });\n    };\n\n    _this.handleEvaluate = function () {\n      _this.setState({\n        output: \"evaluate clicked\"\n      });\n    };\n\n    _this.handleReverse = function () {\n      _this.setState({\n        output: \"reverse clicked\"\n      });\n    };\n\n    _this.handleEpoch = function () {\n      _this.setState({\n        output: \"epoch clicked\"\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"mainContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"English to German Translator\")), React.createElement(\"div\", {\n        id: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-primary\",\n        onClick: this.handleLaunch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Launch\"), React.createElement(\"button\", {\n        className: \"btn-primary ml13\",\n        onClick: this.handleEvaluate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Evaluate\"), React.createElement(\"button\", {\n        className: \"btn-primary ml13\",\n        onClick: this.handleReverse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Reverse Phrase Order\"), React.createElement(\"button\", {\n        className: \"btn-primary ml13\",\n        onClick: this.handleEpoch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Set Epochs\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Display Output:\"), React.createElement(\"div\", {\n        id: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, this.state.output));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport default Home;","map":{"version":3,"sources":["C:\\Users\\redemption\\PycharmProjects\\translator\\src\\components\\home.jsx"],"names":["React","Component","Home","state","output","handleLaunch","myPythonScript","pythonExecutable","uint8arrayToString","data","String","fromCharCode","apply","spawn","require","scriptExecution","stdout","on","console","log","stderr","code","handleEvaluate","setState","handleReverse","handleEpoch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        output: \"Nothing to show\"\r\n    };\r\n\r\n    handleLaunch = () => {\r\n        //this.setState({output : \"launch clicked\"});\r\n        /* const express = require('express');\r\n         const app = express();\r\n\r\n         this.setState({output : \"launch clicked\"});\r\n\r\n         app.get('/', (req, res) => {\r\n         const { spawn } = require(\"child_process\");\r\n         const pythonProcess = spawn('python', [\"C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py\"]);\r\n\r\n         pythonProcess.stdout.on('data', (data) => {\r\n              console.log(data.toString());\r\n             this.setState({output : data})\r\n         });\r\n\r\n          });\r\n\r\n         app.listen(3000, () => console.log('Application listening on port 3000')); */\r\n\r\n        /* const express = require('express');\r\n         const app = express();\r\n\r\n         app.get('/', (req, res) => {\r\n\r\n             const { spawn } = require('child_process');\r\n             const pyProg = spawn('python', ['C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py']);\r\n\r\n             pyProg.stdout.on('data', function(data) {\r\n\r\n                 console.log(data.toString());\r\n                 res.write(data);\r\n                 res.end('end');\r\n             });\r\n         })\r\n\r\n         app.listen(3000, () => console.log('Application listening on port 3000')); */\r\n\r\n        /* const express = require('express');\r\n         const app = express();\r\n\r\n         let runPy = new Promise(function (success, nosuccess) {\r\n\r\n             const { spawn } = require('child_process');\r\n             const pyProg = spawn('python', ['C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py']);\r\n\r\n             pyProg.stdout.on('data', function (data) {\r\n                 success(data);\r\n             });\r\n\r\n             pyProg.stderr.on('data', (data) => {\r\n                 nosuccess(data);\r\n             });\r\n\r\n         });\r\n\r\n         app.get('/', (req, res) => {\r\n             res.write('welcome\\n');\r\n\r\n             runPy.then(function (fromRunpy) {\r\n                 console.log(fromRunpy.toString());\r\n                 res.end(fromRunpy);\r\n             });\r\n         })\r\n\r\n         app.listen(3000, () => console.log('Application listening on port 3000!')) */\r\n\r\n     /*   let myPythonScriptPath = 'C:\\\\Users\\\\redemption\\\\Downloads\\\\scalable web apps\\\\trainNeuralTranslation.py';\r\n\r\n        // Use python shell\r\n        let PythonShell = require('python-shell');\r\n        let pyshell = new PythonShell(myPythonScriptPath);\r\n\r\n        pyshell.on('message', function (message) {\r\n            // received a message sent from the Python script (a simple \"print\" statement)\r\n            console.log(message);\r\n        });\r\n\r\n        // end the input stream and allow the process to exit\r\n        pyshell.end(function (err) {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n            ;\r\n\r\n            console.log('finished');\r\n        }); */\r\n\r\n        // The path to your python script\r\nvar myPythonScript = \"script.py\";\r\n// Provide the path of the python executable, if python is available as environment variable then you can use only \"python\"\r\nvar pythonExecutable = \"python.exe\";\r\n\r\n// Function to convert an Uint8Array to a string\r\nvar uint8arrayToString = function(data){\r\n    return String.fromCharCode.apply(null, data);\r\n};\r\n\r\nconst spawn = require('child_process').spawn;\r\nconst scriptExecution = spawn(pythonExecutable, [myPythonScript]);\r\n\r\n// Handle normal output\r\nscriptExecution.stdout.on('data', (data) => {\r\n    console.log(uint8arrayToString(data));\r\n});\r\n\r\n// Handle error output\r\nscriptExecution.stderr.on('data', (data) => {\r\n    // As said before, convert the Uint8Array to a readable string.\r\n    console.log(uint8arrayToString(data));\r\n});\r\n\r\nscriptExecution.on('exit', (code) => {\r\n    console.log(\"Process quit with code : \" + code);\r\n});\r\n\r\n    };\r\n\r\n    handleEvaluate = () => {\r\n        this.setState({output: \"evaluate clicked\"})\r\n    };\r\n\r\n    handleReverse = () => {\r\n        this.setState({output: \"reverse clicked\"})\r\n    };\r\n\r\n    handleEpoch = () => {\r\n        this.setState({output: \"epoch clicked\"})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"mainContent\">\r\n                <div id=\"title\">\r\n                    <h1>English to German Translator</h1>\r\n                </div>\r\n                <div id=\"buttons\">\r\n                    <button className=\"btn-primary\" onClick={this.handleLaunch}>Launch</button>\r\n                    <button className=\"btn-primary ml13\" onClick={this.handleEvaluate}>Evaluate</button>\r\n                    <button className=\"btn-primary ml13\" onClick={this.handleReverse}>Reverse Phrase Order</button>\r\n                    <button className=\"btn-primary ml13\" onClick={this.handleEpoch}>Set Epochs</button>\r\n                </div>\r\n                <p>Display Output:</p>\r\n                <div id=\"content\">\r\n                    {this.state.output}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}